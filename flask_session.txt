I had to correct /u/elingeniero, because they share a common misconception in flask (sessions are not server side by default, please do not store anything private in there! They are signed, so a client can't easily modify it without the server rejecting it). I replied in-depth there, so I won't duplicate it here.

However the way it works in flask (and many servers):

    Request comes in, they check for a session cookie - loading that into the session proxy if it does exist (otherwise it creates a new session)

    If you add something to the session, on update it simply modifies a bool to say that the session has been modified (meaning that a new cookie needs to be created)

    On response (after your view function) - if the modification is true, a new cookie is created and sent in the response. If not, it doesn't do anything new. The client will include the previous cookie on future requests so it's really not a big deal.

The heavy lifting of most of this is actually done via Werkzeug, flask is just a nice layer on top of that (the proxies are to Werkzeug constructs last I recall).